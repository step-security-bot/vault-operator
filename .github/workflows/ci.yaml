name: CI

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read

env:
  GO_VERSION: 1.19.2

jobs:
  checks:
    name: Checks
    runs-on: ubuntu-latest

    services:
      vault:
        image: vault:1.6.2
        env:
          SKIP_SETCAP: true
          VAULT_DEV_ROOT_TOKEN_ID: 227e1cce-6bf7-30bb-2d2a-acc854318caf
        ports:
          - 8200:8200

    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Checkout repository
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2

      - name: Check licenses
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: make license-check

      - name: Setup test dependencies
        run: |
          sudo apt install opensc softhsm
          sudo mkdir -p /var/lib/softhsm/tokens/
          sudo softhsm2-util --init-token --free --label bank-vaults --so-pin banzai --pin banzai
          sudo pkcs11-tool --module /usr/lib/softhsm/libsofthsm2.so --keypairgen --key-type rsa:2048 --pin banzai --token-label bank-vaults --label bank-vaults
          sudo chown -R runner:docker /etc/softhsm /var/lib/softhsm

  dev:
    name: Developer environment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2

      - name: Set up Nix
        uses: cachix/install-nix-action@4b933aa7ebcc94a6174cf1364864e957b4910265 # v21
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Check
        run: nix flake check --impure

      - name: Dev shell
        run: nix develop --impure

      - name: Run verification
        run: make check
        env:
          VAULT_TOKEN: 227e1cce-6bf7-30bb-2d2a-acc854318caf

  artifacts:
    name: Artifacts
    uses: ./.github/workflows/artifacts.yaml
    with:
      publish: ${{ github.event_name == 'push' }}
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write

  dependency-review:
    name: Dependency review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2

      - name: Dependency Review
        uses: actions/dependency-review-action@1360a344ccb0ab6e9475edef90ad2f46bf8003b1 # v3.0.6

  acceptance-test:
    name: Acceptance test
    runs-on: ubuntu-latest
    needs: [artifacts]
    strategy:
      matrix:
        k8s_version: ["v1.24.13", "v1.25.9", "v1.26.4", "v1.27.1" ]
        vault_version: ["1.10.11", "1.11.10", "1.12.6", "1.13.2"]
    env:
      KURUN_VERSION: "0.6.4"

    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Checkout repository
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2

      - name: Start kind cluster
        run: |
          kind version
          kind create cluster --config test/kind.yaml --image kindest/node:${{ matrix.k8s_version }} --wait 1m

      - name: Download operator docker image
        uses: actions/download-artifact@v3
        with:
          name: "[container-image] Docker tarball"

      - name: Load Docker images to kind
        run: |
          kind load image-archive docker.tar

      - name: Install kurun
        run: |
          curl -Lo kurun https://github.com/banzaicloud/kurun/releases/download/${KURUN_VERSION}/kurun-linux-amd64 && chmod +x kurun && sudo mv kurun /usr/local/bin/

      - name: Acceptance test
        run: go test -v -timeout 900s -tags kubeall ./test
        env:
          VAULT_VERSION: ${{ matrix.vault_version }}
          OPERATOR_VERSION: ${{ needs.artifacts.outputs.container-image-tag }}

  multi-cluster-acceptance-test:
    name: Operator multi-cluster acceptance test
    runs-on: ubuntu-latest
    needs: artifacts
    env:
      K8S_VERSION: "v1.23.4"
      HELM_VERSION: "v3.8.0"
      KIND_VERSION: "v0.12.0"

    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Checkout repository
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2

      - uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: engineerd/setup-kind@v0.5.0
        with:
          version: ${{ env.KIND_VERSION }}

      - name: Download operator docker image
        uses: actions/download-artifact@v3
        with:
          name: "[container-image] Docker tarball"

      - name: Install envtpl
        run: go install github.com/subfuzion/envtpl/...@428c2d7

      - name: Install cidr
        run: go install github.com/hankjacobs/cidr@master

      - name: Build the Helm charts
        run: |
          helm dep build ./charts/vault-operator

      - name: Operator Multi-DC Raft test
        run: ./deploy/multi-dc/test/multi-dc-raft.sh install
        env:
          OPERATOR_VERSION: ${{ needs.artifacts.outputs.container-image-tag }}
